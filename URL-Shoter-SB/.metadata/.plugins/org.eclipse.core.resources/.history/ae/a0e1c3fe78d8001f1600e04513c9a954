package com.url.shorter.service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.url.shorter.dtos.ClickEventDTO;
import com.url.shorter.dtos.UrlMappingDTO;
import com.url.shorter.models.UrlMapping;
import com.url.shorter.models.User;
import com.url.shorter.repository.ClickEventRepository;
import com.url.shorter.repository.UrlMappingRepository;

@Service 
public class UrlMappingService {
	@Autowired 
	private UrlMappingRepository urlMappingRepository;
	@Autowired
	private ClickEventRepository clickEventRepository;

	 public UrlMappingDTO createShortUrl(String originalUrl, User user) {
	        String shortUrl = generateShortUrl();
	        UrlMapping urlMapping = new UrlMapping();
	        urlMapping.setOriginalUrl(originalUrl);
	        urlMapping.setShortUrl(shortUrl);
	        urlMapping.setUser(user);
	        urlMapping.setCreatedDate(LocalDateTime.now());
	        UrlMapping savedUrlMapping = urlMappingRepository.save(urlMapping);
	        return convertToDto(savedUrlMapping);
	    }

	    private UrlMappingDTO convertToDto(UrlMapping urlMapping){
	        UrlMappingDTO urlMappingDTO = new UrlMappingDTO();
	        urlMappingDTO.setId(urlMapping.getId());
	        urlMappingDTO.setOriginalUrl(urlMapping.getOriginalUrl());
	        urlMappingDTO.setShortUrl(urlMapping.getShortUrl());
	        urlMappingDTO.setClickCount(urlMapping.getClickCount());
	        urlMappingDTO.setCreatedDate(urlMapping.getCreatedDate());
	        urlMappingDTO.setUsername(urlMapping.getUser().getUsername());
	        return urlMappingDTO;
	    }

	    private String generateShortUrl() {
	        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

	        Random random = new Random();
	        StringBuilder shortUrl = new StringBuilder(8);

	        for (int i = 0; i < 8; i++) {
	            shortUrl.append(characters.charAt(random.nextInt(characters.length())));
	        }
	        return shortUrl.toString();
	    }

	    public List<UrlMappingDTO> getUrlsByUser(User user) {
	        return urlMappingRepository.findByUser(user).stream()
	                .map(this::convertToDto)
	                .toList();
	    }

		public List<ClickEventDTO> getClickEventsByDate(String shortUrl, LocalDateTime start, LocalDateTime end) {
			 UrlMapping urlMapping = urlMappingRepository.findByShortUrl(shortUrl);
		        if (urlMapping != null) {
		            return clickEventRepository.findByUrlMappingAndClickDateBetween(urlMapping, start, end).stream()
		                    .collect(Collectors.groupingBy(click -> click.getClickDate().toLocalDate(), Collectors.counting()))
		                    .entrySet().stream()
		                    .map(entry -> {
		                        ClickEventDTO clickEventDTO = new ClickEventDTO();
		                        clickEventDTO.setCreateDate(entry.getKey());
		                        clickEventDTO.setCount(entry.getValue());
		                        return clickEventDTO;  
		                    })
		                    .collect(Collectors.toList()); 
		        }
		        return new ArrayList<>();		}
}
